{% if product.metafields.custom.add_ons %}
  <script
    src="{{ 'product-form.js' | asset_url }}"
    type="module"
  ></script>
  
  <div class="product-add-ons" style="padding-top: {{ block.settings.padding_top }}px; padding-bottom: {{ block.settings.padding_bottom }}px;">
    <div class="add-ons-header">
      <h3 class="text-lg font-semibold mb-2">{{ block.settings.heading | default: "Add-ons" }}</h3>
      <div class="add-ons-navigation">
        <button class="add-ons-arrow add-ons-arrow--prev" onclick="slideAddOns('prev')" aria-label="Previous add-ons">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
            <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
          </svg>
        </button>
        <button class="add-ons-arrow add-ons-arrow--next" onclick="slideAddOns('next')" aria-label="Next add-ons">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
            <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
          </svg>
        </button>
      </div>
    </div>
    
    <div class="add-ons-carousel-container">
      <div class="add-ons-carousel" id="addOnsCarousel">
        {% for add_on in product.metafields.custom.add_ons.value %}
          <div class="add-on-card" data-slide="{{ forloop.index0 }}">
            <a href="{{ add_on.url }}" class="link-block">
              <img 
                src="{{ add_on.featured_image | image_url: width: 150 }}" 
                alt="{{ add_on.title }}" 
                class="add-on-image"
                width="150"
                height="150"
                loading="lazy"
              >
              <div class="add-on-info">
              <p class="mt-2 text-sm font-medium">{{ add_on.title }}</p>
              {% if block.settings.show_price and add_on.price %}
                <p class="text-sm text-gray-600">{{ add_on.price | money }}</p>
            
              {% endif %}
                  </div>
            </a>
            
            {% comment %} Add to Cart Form {% endcomment %}
            <div class="add-on-product-form" data-add-on-id="{{ add_on.id }}">
              <product-form-component 
                class="product-form add-on-form"
                data-product-id="{{ add_on.id }}"
                data-quantity-default="1"
              >
                <form action="{{ routes.cart_add_url }}" method="post" enctype="multipart/form-data" class="mt-2" on:submit="/handleSubmit">
                  <input type="hidden" name="id" value="{{ add_on.selected_or_first_available_variant.id }}" ref="variantId">
                  <input type="hidden" name="quantity" value="1">
                  
                  <!-- Debug: {{ block.settings.addon_button_text }} -->
                  <button
                    id="AddToCart-{{ add_on.id }}"
                    type="submit"
                    name="add"
                    class="button add-on-button"
                    {% unless add_on.available %}disabled{% endunless %}
                  >
                    {{ block.settings.addon_button_text | default: "+" }}
                  </button>
                  
                  <!-- Live region for screen readers -->
                  <div ref="liveRegion" aria-live="polite" aria-atomic="true" class="sr-only"></div>
                </form>
              </product-form-component>
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
  </div>
{% endif %}

{% stylesheet %}

/* Header with navigation arrows */
.link-block {
  display: flex;
gap: 20px;
flex-direction: row;
}


.add-on-info {
place-self: center; 
}


.add-ons-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.add-ons-navigation {
  display: flex;
  gap: 0.5rem;
}

.add-ons-arrow {
  background: #f8f9fa;
  border: 1px solid #e0e0e0;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
}

.add-ons-arrow:hover {
  background: #e9ecef;
  border-color: #ccc;
}

.add-ons-arrow:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.add-ons-arrow svg {
  color: #333;
}

/* Carousel container */
.add-ons-carousel-container {
  overflow: hidden;
  position: relative;
}

.add-ons-carousel {
  display: flex;
  transition: transform 0.3s ease;
  gap: 1rem;
}

.add-on-card {
border: 1px solid rgb(224, 224, 224);
display: flex;
align-items: center;
justify-content: space-between; 
height: 130px;
flex-direction: row;
border-radius: 8px;
padding: 0.5rem;
flex: 0 0 calc(50% - 0.5rem);
position: relative;
z-index: 1;
min-width: 200px;
}


.add-on-image {
width: 130px;
height: 130px;
object-fit: cover;
  border-radius: 4px;
}

.add-on-button {
  position: relative;
  z-index: 2;
  width: 100%;
}


/* Ensure add-on forms maintain their state */
.add-on-form button[disabled] {
  pointer-events: none;
}

/* Responsive design */
@media (max-width: 768px) {
  .add-on-card {
    flex: 0 0 100%; /* Show 1 item at a time on mobile */
  }
  
  .add-ons-header {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }
  
  .add-ons-navigation {
    align-self: flex-end;
  }
}

{% endstylesheet %}

<script type="module">
  // Carousel functionality for add-ons
  let currentSlide = 0;
  const itemsPerView = window.innerWidth <= 768 ? 1 : 2; // Show 1 item on mobile, 2 on desktop
  
  function slideAddOns(direction) {
    const carousel = document.getElementById('addOnsCarousel');
    const items = carousel.querySelectorAll('.add-on-card');
    const totalItems = items.length;
    const maxSlide = Math.max(0, totalItems - itemsPerView);
    
    if (direction === 'next') {
      currentSlide = Math.min(currentSlide + 1, maxSlide);
    } else {
      currentSlide = Math.max(currentSlide - 1, 0);
    }
    
    const translateX = -(currentSlide * (100 / itemsPerView));
    carousel.style.transform = `translateX(${translateX}%)`;
    
    // Update arrow states
    updateArrowStates(currentSlide, maxSlide);
  }
  
  function updateArrowStates(current, max) {
    const prevBtn = document.querySelector('.add-ons-arrow--prev');
    const nextBtn = document.querySelector('.add-ons-arrow--next');
    
    prevBtn.disabled = current === 0;
    nextBtn.disabled = current === max;
  }
  
  // Initialize carousel
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('addOnsCarousel');
    if (carousel) {
      const items = carousel.querySelectorAll('.add-on-card');
      const maxSlide = Math.max(0, items.length - itemsPerView);
      updateArrowStates(0, maxSlide);
    }
  });
  
  // Make slideAddOns globally accessible
  window.slideAddOns = slideAddOns;
  
  // Fix for add-on product forms being disabled by main product variant changes
  class AddOnFormProtector {
    constructor() {
      this.protectAddOnForms();
    }
    
    protectAddOnForms() {
      // Wait for DOM content to be loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.init());
      } else {
        this.init();
      }
    }
    
    init() {
      // Only target add-on forms specifically - be very precise with selectors
      const addOnForms = document.querySelectorAll('.add-on-product-form[data-add-on-id] .add-on-form');
      
      addOnForms.forEach(form => {
        // Store initial state
        const button = form.querySelector('button[type="submit"].add-on-button');
        if (button) {
          const initialDisabled = button.disabled;
          const addOnId = form.closest('[data-add-on-id]').dataset.addOnId;
          
          // Override the disable method to prevent external disabling for add-on forms only
          const originalDisable = form.disable?.bind(form);
          if (originalDisable) {
            form.disable = function() {
              // Don't disable add-on forms from variant updates
              console.log(`Blocked disable attempt on add-on form for product ${addOnId}`);
              return;
            };
          }
          
          // Monitor for external changes and protect only add-on buttons
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'disabled') {
                const target = mutation.target;
                // Only protect buttons inside add-on forms that were initially available
                if (target.tagName === 'BUTTON' && 
                    target.type === 'submit' && 
                    target.classList.contains('add-on-button') &&
                    !initialDisabled &&
                    target.closest('.add-on-product-form[data-add-on-id]')) {
                  // Re-enable if it was disabled externally
                  console.log(`Re-enabling add-on button for product ${addOnId}`);
                  setTimeout(() => {
                    target.disabled = false;
                  }, 0);
                }
              }
            });
          });
          
          observer.observe(button, { attributes: true });
        }
      });
    }
  }
  
  new AddOnFormProtector();
</script>

{% schema %}
{
  "name": "Product Add-ons",
  "tag": "div",
  "settings": [
    {
      "type": "header",
      "content": "Add-ons Display"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Add-ons"
    },
    {
      "type": "select",
      "id": "columns",
      "label": "Columns",
      "options": [
        {
          "value": "1",
          "label": "1 Column"
        },
        {
          "value": "2",
          "label": "2 Columns"
        },
        {
          "value": "3",
          "label": "3 Columns"
        }
      ],
      "default": "2"
    },
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "text",
      "id": "addon_button_text",
      "label": "Add-on Button Text",
      "default": "ADD TO CART"
    },
    {
      "type": "checkbox",
      "id": "show_price",
      "label": "Show product price",
      "default": true
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Top padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Bottom padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 24
    }
  ],
  "presets": [
    {
      "name": "Product Add-ons"
    }
  ]
}
{% endschema %}
