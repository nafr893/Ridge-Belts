{% if product.metafields.custom.add_ons %}
  <script
    src="{{ 'product-form.js' | asset_url }}"
    type="module"
  ></script>
  
  <div class="product-add-ons" style="padding-top: {{ block.settings.padding_top }}px; padding-bottom: {{ block.settings.padding_bottom }}px;">
    <h3 class="text-lg font-semibold mb-2">{{ block.settings.heading | default: "Add-ons" }}</h3>
    <div class="flex flex-row flex-wrap gap-4">
      {% for add_on in product.metafields.custom.add_ons.value %}
        <div class="add-on-card" style="min-width: 200px; max-width: 300px;">
          <a href="{{ add_on.url }}" class="block">
            <img 
              src="{{ add_on.featured_image | image_url: width: 150 }}" 
              alt="{{ add_on.title }}" 
              class="add-on-image"
              width="150"
              height="150"
              loading="lazy"
            >
            <p class="mt-2 text-sm font-medium">{{ add_on.title }}</p>
            {% if block.settings.show_price and add_on.price %}
              <p class="text-sm text-gray-600">{{ add_on.price | money }}</p>
            {% endif %}
          </a>
          
          {% comment %} Add to Cart Form {% endcomment %}
          <div class="add-on-product-form" data-add-on-id="{{ add_on.id }}">
            <product-form-component 
              class="product-form add-on-form"
              data-product-id="{{ add_on.id }}"
              data-quantity-default="1"
            >
              <form action="{{ routes.cart_add_url }}" method="post" enctype="multipart/form-data" class="mt-2" on:submit="/handleSubmit">
                <input type="hidden" name="id" value="{{ add_on.selected_or_first_available_variant.id }}" ref="variantId">
                <input type="hidden" name="quantity" value="1">
                
                {% render 'add-to-cart-button',
                  id: 'AddToCart-' | append: add_on.id,
                  class: 'add-on-button',
                  can_add_to_cart: add_on.available,
                  product: add_on,
                  add_to_cart_text: block.settings.button_text
                %}
                
                <!-- Live region for screen readers -->
                <div ref="liveRegion" aria-live="polite" aria-atomic="true" class="sr-only"></div>
              </form>
            </product-form-component>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
{% endif %}

{% stylesheet %}

.add-on-card {
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  padding: 0.5rem;
  flex-shrink: 0;
  position: relative;
  z-index: 1;
}

.add-on-card:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.add-on-image {
  width: 100%;
  height: 120px; 
  object-fit: cover;
  border-radius: 4px;
}

.add-on-button {
  position: relative;
  z-index: 2;
  width: 100%;
}

/* Ensure add-on forms maintain their state */
.add-on-form button[disabled] {
  pointer-events: none;
}

{% endstylesheet %}

<script type="module">
  // Fix for add-on product forms being disabled by main product variant changes
  class AddOnFormProtector {
    constructor() {
      this.protectAddOnForms();
    }
    
    protectAddOnForms() {
      // Wait for DOM content to be loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.init());
      } else {
        this.init();
      }
    }
    
    init() {
      // Only target add-on forms specifically (not main product forms)
      const addOnForms = document.querySelectorAll('.add-on-product-form .add-on-form');
      
      addOnForms.forEach(form => {
        // Store initial state
        const button = form.querySelector('button[type="submit"]');
        if (button) {
          const initialDisabled = button.disabled;
          
          // Override the disable method to prevent external disabling for add-on forms only
          const originalDisable = form.disable?.bind(form);
          if (originalDisable) {
            form.disable = function() {
              // Don't disable add-on forms from variant updates
              return;
            };
          }
          
          // Monitor for external changes and protect only add-on buttons
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'disabled') {
                const target = mutation.target;
                // Only protect buttons inside add-on forms that were initially available
                if (target.tagName === 'BUTTON' && 
                    target.type === 'submit' && 
                    !initialDisabled &&
                    target.closest('.add-on-product-form')) {
                  // Re-enable if it was disabled externally
                  setTimeout(() => {
                    target.disabled = false;
                  }, 0);
                }
              }
            });
          });
          
          observer.observe(button, { attributes: true });
        }
      });
    }
  }
  
  new AddOnFormProtector();
</script>

{% schema %}
{
  "name": "Product Add-ons",
  "tag": "div",
  "settings": [
    {
      "type": "header",
      "content": "Add-ons Display"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Add-ons"
    },
    {
      "type": "select",
      "id": "columns",
      "label": "Columns",
      "options": [
        {
          "value": "1",
          "label": "1 Column"
        },
        {
          "value": "2",
          "label": "2 Columns"
        },
        {
          "value": "3",
          "label": "3 Columns"
        }
      ],
      "default": "2"
    },
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Add to Cart Button Text",
      "default": "+"
    },
    {
      "type": "checkbox",
      "id": "show_price",
      "label": "Show product price",
      "default": true
    },
    {
      "type": "header",
      "content": "Spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "label": "Top padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "label": "Bottom padding",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "default": 24
    }
  ],
  "presets": [
    {
      "name": "Product Add-ons"
    }
  ]
}
{% endschema %}
